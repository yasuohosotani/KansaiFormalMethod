/*
 * generated by Xtext
 */
package org.xtext.example.modelchecking2.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import javax.inject.Inject
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.xtext.example.modelchecking2.transitionSystem.TransitionModel
import org.xtext.example.modelchecking2.transitionSystem.TransitionSystem
import org.xtext.example.modelchecking2.transitionSystem.Configuration
import org.xtext.example.modelchecking2.transitionSystem.SetOfStates
import org.xtext.example.modelchecking2.transitionSystem.SetOfInitialStates
import org.xtext.example.modelchecking2.transitionSystem.SetOfTransitions
import org.xtext.example.modelchecking2.TransitionSystemComposer

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class TransitionSystemGenerator implements IGenerator {

	@Inject extension IQualifiedNameProvider
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
	  for(model: resource.allContents.toIterable.filter(TransitionModel)) {
	    fsa.generateFile(
	      model.fullyQualifiedName.toString("/") + ".smv",
	      model.compile)
	  }
	}

	def compile(TransitionModel model) '''
	  «model.configuration.compile»
	'''

	def compile(TransitionSystem ts) '''
	  MODULE main
	  CONSTANTS
	    «ts.setOfStates.compileConstants»
	  VAR
	    «ts.setOfStates.compileVar»
	  ASSIGN
	    «ts.setOfInitialStates.compileInit»
	    «ts.compileNextState»
	  DEFINE
	    «ts.compileDefineSubStates»
	    deadlock := case
	      state = __terminal__ : TRUE;
	      TRUE: FALSE;
	    esac;
	'''

	def compileConstants(SetOfStates setOfStates) '''
	  «var subStateList = TransitionSystemComposer.getSubStateList(setOfStates)»
	    «FOR state: subStateList»
	    «state»«IF state != subStateList.last»,«ELSE»;«ENDIF»
	    «ENDFOR»
	'''
	
	def compileVar(SetOfStates setOfStates) '''
	  «IF setOfStates != null && 
	      setOfStates.states != null && 
	      ! setOfStates.states.isEmpty()» 
	  state: {
	    «FOR state: setOfStates.states»
	    «state.name.replace(TransitionSystemComposer.nameSeparator,'_')»,
	    «ENDFOR»
	    __terminal__
	  };
	  «ENDIF»
	'''

	def compileInit(SetOfInitialStates setOfInitialStates) '''
	  «IF setOfInitialStates != null && 
	      setOfInitialStates.initialStates != null && 
	      ! setOfInitialStates.initialStates.isEmpty()» 
	  init(state) := {
	    «FOR state: setOfInitialStates.initialStates»
	      «state.name.replace(TransitionSystemComposer.nameSeparator,'_')»«IF state != setOfInitialStates.initialStates.last()»,«ENDIF»
	    «ENDFOR»
	  };
	  «ENDIF»
	'''

	def compileNextState(TransitionSystem transitionSystem) '''
	  «IF transitionSystem.setOfStates != null && 
	      transitionSystem.setOfStates.states != null»
	  «transitionSystem.setOfTransitions.compileNext»
	  «ENDIF»
	'''

	def compileNext(SetOfTransitions setOfTransitions) '''
	  next(state):= case
	    «IF setOfTransitions != null && 
	        setOfTransitions.transitions != null»
	    «FOR fromState: TransitionSystemComposer.getFromStates(setOfTransitions)»
	    state = «fromState.name.replace(TransitionSystemComposer.nameSeparator,'_')»: {
	      «val toStateList = TransitionSystemComposer.getToStates(setOfTransitions,fromState)»
	      «FOR toState: toStateList»
	      «FOR transition: setOfTransitions.transitions»
	      «IF transition.from == fromState && transition.to == toState»
	      -- event «transition.event.name»
	      «ENDIF»
	      «ENDFOR»
	      «toState.name.replace(TransitionSystemComposer.nameSeparator,'_')»«IF toState != toStateList.last»,«ENDIF»
	      «ENDFOR»	      
	    };
	    «ENDFOR»
	    «ENDIF»
	    TRUE: __terminal__;
	  esac;
	'''
	
	def compileDefineSubStates(TransitionSystem ts) '''
	  «val tsNames = ts.name.split(TransitionSystemComposer.nameSeparator).toArray()»
	  «FOR i: {0..tsNames.size() - 1}»
	  «tsNames.get(i)» := case
	    «val stateList = ts.setOfStates.states»
	    «FOR state: stateList»
	    «val subStateList = state.name.split(TransitionSystemComposer.nameSeparator).toArray()»
	    state = «state.name.replace(TransitionSystemComposer.nameSeparator,'_')»: «subStateList.get(i)»;
	  «ENDFOR»
	    TRUE: __terminal__;
	  esac;
	  «ENDFOR»
	'''

	def compile(Configuration config) '''
	  «TransitionSystemComposer.compose(config.composition).compile»
	'''

}

